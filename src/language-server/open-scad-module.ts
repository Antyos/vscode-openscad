import {
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject,
    LangiumServices, LangiumSharedServices, Module, PartialLangiumServices
} from 'langium';
import { OpenScadGeneratedModule, OpenScadGeneratedSharedModule } from './generated/module';
import OpenScadAstNodeDescriptionProvider from './open-scad-ast-node-description-provider';
import { OpenScadCompletionProvider } from './open-scad-completion-provider';
import { OpenScadScopeComputation } from './open-scad-scope-computation';
import { OpenScadScopeProvider } from './open-scad-scope-provider';
import { OpenScadValidationRegistry, OpenScadValidator } from './open-scad-validator';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type OpenScadAddedServices = {
    validation: {
        OpenScadValidator: OpenScadValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type OpenScadServices = LangiumServices & OpenScadAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const OpenScadModule: Module<OpenScadServices, PartialLangiumServices & OpenScadAddedServices> = {
    index: {
        AstNodeDescriptionProvider: services => new OpenScadAstNodeDescriptionProvider(services)
    },
    references: {
        ScopeComputation: (services) => new OpenScadScopeComputation(services),
        ScopeProvider: services => new OpenScadScopeProvider(services),
    },
    lsp: {
        completion: {
            CompletionProvider: services => new OpenScadCompletionProvider(services)

        }
    },
    validation: {
        ValidationRegistry: (services) => new OpenScadValidationRegistry(services),
        OpenScadValidator: () => new OpenScadValidator()
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createOpenScadServices(context?: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    OpenScad: OpenScadServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        OpenScadGeneratedSharedModule
    );
    const OpenScad = inject(
        createDefaultModule({ shared }),
        OpenScadGeneratedModule,
        OpenScadModule
    );
    shared.ServiceRegistry.register(OpenScad);
    return { shared, OpenScad };
}
