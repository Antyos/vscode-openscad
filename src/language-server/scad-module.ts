import {
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, DefaultWorkspaceManager, inject,
    LangiumServices, LangiumSharedServices, Module, PartialLangiumServices
} from 'langium';
import { ScadGeneratedModule, ScadGeneratedSharedModule } from './generated/module';
import ScadAstNodeDescriptionProvider from './scad-ast-node-description-provider';
import { ScadCompletionProvider } from './scad-completion-provider';
import { ScadScopeComputation } from './scad-scope-computation';
import { ScadScopeProvider } from './scad-scope-provider';
import { ScadValidationRegistry, ScadValidator } from './scad-validator';
import ScadWorkspaceManager from './scad-workspace-manager';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type ScadAddedServices = {
    validation: {
        OpenScadValidator: ScadValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type ScadServices = LangiumServices & ScadAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const OpenScadModule: (extensionPath: string) => Module<ScadServices, PartialLangiumServices & ScadAddedServices> = extensionPath => ({
    index: {
        AstNodeDescriptionProvider: services => new ScadAstNodeDescriptionProvider(services)
    },
    references: {
        ScopeComputation: (services) => new ScadScopeComputation(services),
        ScopeProvider: services => new ScadScopeProvider(extensionPath, services),
    },
    lsp: {
        completion: {
            CompletionProvider: services => new ScadCompletionProvider(services)
        }
    },
    validation: {
        ValidationRegistry: (services) => new ScadValidationRegistry(services),
        OpenScadValidator: () => new ScadValidator()
    }
});

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createScadServices(extensionPath: string, context?: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    OpenScad: ScadServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        ScadGeneratedSharedModule,
        {
            workspace: {
                WorkspaceManager: context => new ScadWorkspaceManager(extensionPath, context)
            }
        }
    );
    const OpenScad = inject(
        createDefaultModule({ shared }),
        ScadGeneratedModule,
        OpenScadModule(extensionPath),
    );
    shared.ServiceRegistry.register(OpenScad);
    return { shared, OpenScad };
}
